{"version":3,"sources":["types/actions.ts","redux/messages/messagesReducers.ts","redux/store.ts","components/shared/Message/Message.tsx","components/elements/MessageList/MessageList.tsx","components/elements/MessageInput/MessageInput.tsx","components/elements/MessageDND/MessageDND.tsx","redux/messages/messagesActions.ts","screen/HomeScreen/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ADD_MESSAGE","initialState","persistedReducer","combineReducers","messagesStore","state","action","type","payload","id","logger","createLogger","middleWares","compose","applyMiddleware","reduxThunk","promise","store","createStore","Message","imgs","className","this","props","message","text","files","forEach","file","reader","FileReader","readAsDataURL","onloadend","Date","now","setState","prevState","concat","src","result","alt","key","lastModified","name","React","PureComponent","MessageList","Object","values","messages","map","MessageInput","handleChange","e","target","value","handleSubmit","preventDefault","length","addMessage","clearFiles","onSubmit","multiple","accept","onChange","handleFiles","htmlFor","style","fontSize","autoComplete","placeholder","onClick","MessageDND","previewFiles","handlerFunction","console","log","handleDrop","dataTransfer","uploadFile","previewFile","stopPropagation","dropArea","document","getElementById","highlight","classList","add","unhighlight","remove","eventName","addEventListener","preventDefaults","dispatch","HomeScreen","background","height","Component","connect","bindActionCreators","App","rel","href","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","URL","process","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.09a320ed.chunk.js","sourcesContent":["export const ADD_MESSAGE = 'ADD_MESSAGE';","import { ADD_MESSAGE } from '../../types/actions';\nimport { MessagesStore } from '../../types/store';\n\nconst initialState: MessagesStore = {};\n\nexport function messagesReducer(state = initialState, action): MessagesStore {\n\tconst { type, payload } = action;\n\tswitch (type) {\n\tcase ADD_MESSAGE:\n\t\treturn {\n\t\t\t[payload.id]: payload,\n\t\t\t...state\n\t\t};\n\tdefault:\n\t\treturn state;\n\t}\n}","import { createStore, applyMiddleware, compose, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport reduxThunk from 'redux-thunk';\nimport promise from 'redux-promise';\n\nimport { messagesReducer } from './messages/messagesReducers';\n\nconst persistedReducer = combineReducers({\n\tmessagesStore: messagesReducer,\n});\n\nconst logger = createLogger();\nconst middleWares = compose(applyMiddleware(reduxThunk, promise, logger));\n\nconst store = createStore(\n\tpersistedReducer,\n\tmiddleWares,\n);\n\nexport { store };","import React from 'react';\nimport { MessageValue } from '../../../types/store';\nimport './Message.css';\n\ninterface MessageProps {\n\tmessage: MessageValue;\n}\n\ninterface MessageState {\n\timgs: Array<React.ReactElement>;\n}\n\nexport default class Message extends React.PureComponent<MessageProps, MessageState> {\n\tstate = {\n\t\timgs: []\n\t}\n\trender(): React.ReactElement {\n\t\treturn (\n\t\t\t<div className=\"bodyMessage\">\n\t\t\t\t<div className=\"textMessage\">{this.props.message.text}\n\t\t\t\t\t{this.state.imgs}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n\n\tcomponentDidMount(): void {\n\t\tconst { files } = this.props.message;\n\t\tfiles.forEach(\n\t\t\tfile => {\n\t\t\t\tconst reader = new FileReader();\n\t\t\t\treader.readAsDataURL(file);\n\t\t\t\treader.onloadend = (): void => {\n\t\t\t\t\tconst id = Date.now();\n\t\t\t\t\tthis.setState(prevState => ({\n\t\t\t\t\t\timgs: prevState.imgs.concat(<img src={reader.result as any} className=\"imageMessage\" alt=\"\" key={file.lastModified + file.name + id}/>)\n\t\t\t\t\t})\n\t\t\t\t\t);\n\t\t\t\t};\n\t\t\t}\n\t\t);\n\t}\n}","import React from 'react';\nimport Message from '../../shared/Message/Message';\nimport { MessagesStore } from '../../../types/store';\nimport './MessageList.css';\n\ninterface MessageListProps {\n\tmessages: MessagesStore;\n}\n\nexport default class MessageList extends React.PureComponent<MessageListProps> {\n\trender(): any {\n\t\treturn (\n\t\t\t<div className=\"divMessageList\">\n\t\t\t\t{Object.values(this.props.messages).map(message => (\n\t\t\t\t\t<Message message={message} key={message.id}/>\n\t\t\t\t))}\n\t\t\t</div>\n\t\t);\n\t}\n}","import React from 'react';\nimport { MessageValue } from '../../../types/store';\nimport './MessageInput.css';\n\ninterface MessageInputProps {\n\taddMessage(message: MessageValue): void;\n\thandleFiles(files): void;\n\tclearFiles(): void;\n\tfiles: Array<File>;\n}\n\ninterface MessageInputState {\n\ttext: string;\n}\n\nexport default class MessageInput extends React.PureComponent<MessageInputProps, MessageInputState> {\n\tstate = { text: '' };\n\n\thandleChange = (e): void => {\n\t\tthis.setState({ text: e.target.value });\n\t}\n\n\thandleSubmit = (e): void => {\n\t\te.preventDefault();\n\t\tif (!(this.state.text.length || this.props.files.length)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst message = { text: this.state.text, id: Date.now(), files: this.props.files };\n\t\tthis.props.addMessage(message);\n\n\t\tthis.setState({\n\t\t\ttext: ''\n\t\t});\n\t\tthis.props.clearFiles();\n\t}\n\n\trender(): React.ReactElement {\n\t\treturn (\n\t\t\t<form className=\"form\" onSubmit={this.handleSubmit}>\n\t\t\t\t<input type=\"file\" id=\"fileElem\" multiple accept=\"image/*\" onChange={this.props.handleFiles} />\n\t\t\t\t<label className=\"button\" htmlFor=\"fileElem\">\n\t\t\t\t\t<i className=\"fa fa-paperclip\" style={{ fontSize: '24px' }} />\n\t\t\t\t</label>\n\t\t\t\t<input\n\t\t\t\t\tautoComplete=\"off\"\n\t\t\t\t\tclassName=\"input\"\n\t\t\t\t\tplaceholder='Напишите сообщение...'\n\t\t\t\t\tonChange={this.handleChange}\n\t\t\t\t\tvalue={this.state.text}\n\t\t\t\t/>\n\t\t\t\t<button className=\"send\" onClick={this.handleSubmit} >\n\t\t\t\t\t<i className=\"fa fa-send-o\" style={{ fontSize: '24px' }} />\n\t\t\t\t</button>\n\t\t\t</form>\n\t\t);\n\t}\n}","import React from 'react';\nimport { MessageValue } from '../../../types/store';\nimport MessageInput from '../MessageInput/MessageInput';\nimport './MessageDND.css';\n\ninterface MessageDNDProps {\n\taddMessage(message: MessageValue): void;\n}\n\ninterface MessageDNDState {\n\tfiles: Array<File>;\n\tpreviewFiles: Array<React.ReactElement>;\n}\n\nexport default class MessageDND extends React.PureComponent<MessageDNDProps, MessageDNDState> {\n\tstate = { files: [], previewFiles: [] };\n\n\thandlerFunction = (e): void => {\n\t\tconsole.log(e);\n\t\te.preventDefault();\n\t}\n\n\thandleDrop = (e): void => {\n\t\tconst dt = e.dataTransfer;\n\t\tconst files = dt.files;\n\t\tthis.uploadFile(files);\n\t};\n\n\thandleFiles = (files): void => {\n\t\tthis.uploadFile(files.target.files);\n\t\tfiles.target.value = null;\n\t}\n\n\tuploadFile = (files): void => {\n\t\tfiles = [...files];\n\t\tthis.previewFile(files);\n\t\tthis.setState((prevState) => ({ files: prevState.files.concat(files) }));\n\t}\n\n\tpreviewFile = (files): void => {\n\t\tfiles.forEach(file => {\n\t\t\tconst reader = new FileReader();\n\t\t\treader.readAsDataURL(file);\n\t\t\treader.onloadend = (): void => {\n\t\t\t\tconst id = Date.now();\n\t\t\t\tthis.setState(prevState => ({\n\t\t\t\t\tpreviewFiles: prevState.previewFiles.concat(\n\t\t\t\t\t\t<img src={`${reader.result}`} className=\"image\" alt=\"\" key={file.lastModified + file.name + id} />\n\t\t\t\t\t)\n\t\t\t\t}));\n\t\t\t};\n\t\t});\n\t}\n\n\tclearFiles = () => {\n\t\tthis.setState({ files: [], previewFiles: [] });\n\t}\n\n\trender(): React.ReactElement {\n\t\treturn (\n\t\t\t<div id=\"drop-area\">\n\t\t\t\t<MessageInput\n\t\t\t\t\thandleFiles={this.handleFiles}\n\t\t\t\t\taddMessage={this.props.addMessage}\n\t\t\t\t\tclearFiles={this.clearFiles}\n\t\t\t\t\tfiles={this.state.files} />\n\t\t\t\t<div id=\"gallery\">\n\t\t\t\t\t{this.state.previewFiles}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n\n\tpreventDefaults(e): void {\n\t\te.preventDefault();\n\t\te.stopPropagation();\n\t}\n\n\tcomponentDidMount(): void {\n\t\tconst dropArea = document.getElementById('drop-area');\n\n\t\tfunction highlight(): void {\n\t\t\tdropArea.classList.add('highlight');\n\t\t}\n\t\tfunction unhighlight(): void {\n\t\t\tdropArea.classList.remove('highlight');\n\t\t}\n\n\t\t['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {\n\t\t\tdropArea.addEventListener(eventName, this.preventDefaults, false);\n\t\t});\n\t\t['dragenter', 'dragover'].forEach(eventName => {\n\t\t\tdropArea.addEventListener(eventName, highlight, false);\n\t\t});\n\t\t['dragleave', 'drop'].forEach(eventName => {\n\t\t\tdropArea.addEventListener(eventName, unhighlight, false);\n\t\t});\n\t\tdropArea.addEventListener('drop', this.handleDrop, false);\n\t}\n}","import { Dispatch, Action } from 'redux';\nimport { ADD_MESSAGE } from '../../types/actions';\nimport { MessageValue } from '../../types/store';\n\nexport const addMessage = (message: MessageValue) => {\n\treturn (dispatch: Dispatch<Action>): void => {\n\t\tdispatch({ type: ADD_MESSAGE, payload: message });\n\t};\n};","import React from 'react';\nimport MessageList from '../../components/elements/MessageList/MessageList';\nimport MessageDND from '../../components/elements/MessageDND/MessageDND';\nimport { MessagesStore, ApplicationStore, MessageValue } from '../../types/store';\nimport './styles.css';\n\nimport { connect } from 'react-redux';\nimport { bindActionCreators, Dispatch, AnyAction } from 'redux';\nimport { addMessage } from '../../redux/messages/messagesActions';\n\ninterface HomeScreenProps {\n\tmessagesStore: MessagesStore;\n\taddMessage(Item: MessageValue): void;\n}\n\nconst mapStateToProps = (state: ApplicationStore) => ({\n\tmessagesStore: state.messagesStore,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>) => ({\n\taddMessage: bindActionCreators(addMessage, dispatch)\n});\n\nclass HomeScreen extends React.Component<HomeScreenProps> {\n\n\trender(): React.ReactElement {\n\t\tconst { messagesStore, addMessage } = this.props;\n\t\treturn (\n\t\t\t<div className=\"background\">\n\t\t\t\t<header style={{ background: 'white', height: '50px' }}>Чат</header>\n\t\t\t\t<div className=\"container\">\n\t\t\t\t\t<div className=\"content\">\n\t\t\t\t\t\t<MessageList messages={messagesStore} />\n\t\t\t\t\t\t<MessageDND addMessage={addMessage} />\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(HomeScreen);","import React, { Component } from 'react';\n\nimport { Provider } from 'react-redux';\nimport { store } from './redux/store';\nimport HomeScreen from './screen/HomeScreen';\n\nclass App extends Component {\n\trender(): React.ReactElement {\n\t\treturn (\n\t\t\t<Provider store={store}>\n\t\t\t\t<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\"></link>\n\t\t\t\t<HomeScreen />\n\t\t\t</Provider >\n\t\t);\n\t}\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.register();"],"sourceRoot":""}