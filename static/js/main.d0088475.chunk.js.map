{"version":3,"sources":["types/actions.ts","redux/messages/messagesReducers.ts","redux/store.ts","components/shared/Message/Message.tsx","components/elements/MessageList/MessageList.tsx","components/elements/MessageInput/MessageInput.tsx","redux/messages/messagesActions.ts","screen/HomeScreen/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ADD_MESSAGE","initialState","persistedReducer","combineReducers","messagesStore","state","action","type","payload","id","logger","createLogger","middleWares","compose","applyMiddleware","reduxThunk","promise","store","createStore","Message","imgs","className","this","props","message","text","files","length","forEach","file","reader","FileReader","readAsDataURL","onloadend","setState","prevState","concat","src","result","style","maxHeight","maxWidth","React","PureComponent","MessageList","Object","values","messages","map","key","MessageInput","handleChange","e","target","value","handleSubmit","preventDefault","Date","now","addMessage","document","getElementById","innerHTML","handlerFunction","console","log","handleDrop","dataTransfer","uploadFile","previewFile","handleFiles","img","createElement","appendChild","onSubmit","multiple","accept","onChange","htmlFor","fontSize","autoComplete","placeholder","stopPropagation","dropArea","highlight","classList","add","unhighlight","remove","eventName","addEventListener","preventDefaults","dispatch","HomeScreen","background","height","Component","connect","bindActionCreators","App","rel","href","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","URL","process","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.d0088475.chunk.js","sourcesContent":["export const ADD_MESSAGE = 'ADD_MESSAGE';","import { ADD_MESSAGE } from '../../types/actions';\r\nimport { MessagesStore } from '../../types/store';\r\n\r\nconst initialState: MessagesStore = {};\r\n\r\nexport function messagesReducer(state = initialState, action): any {\r\n\tconst { type, payload } = action;\r\n\tswitch (type) {\r\n\tcase ADD_MESSAGE:\r\n\t\treturn {\r\n\t\t\t[payload.id]: payload,\r\n\t\t\t...state\r\n\t\t};\r\n\tdefault:\r\n\t\treturn state;\r\n\t}\r\n}","import { createStore, applyMiddleware, compose, combineReducers } from 'redux';\r\nimport { createLogger } from 'redux-logger';\r\nimport reduxThunk from 'redux-thunk';\r\nimport promise from 'redux-promise';\r\n\r\nimport { messagesReducer } from './messages/messagesReducers';\r\n\r\nconst persistedReducer = combineReducers({\r\n\tmessagesStore: messagesReducer,\r\n});\r\n\r\nconst logger = createLogger();\r\nconst middleWares = compose(applyMiddleware(reduxThunk, promise, logger));\r\n\r\nconst store = createStore(\r\n\tpersistedReducer,\r\n\tmiddleWares,\r\n);\r\n\r\nexport { store };","import React from 'react';\r\nimport { MessageValue  } from '../../../types/store';\r\nimport './Message.css';\r\n\r\ninterface MessageProps {\r\n\tmessage: MessageValue;\r\n}\r\n\r\ninterface MessageState {\r\n\timgs: any;\r\n}\r\n\r\nexport default class Message extends React.PureComponent<MessageProps, MessageState> {\r\n\tstate = {\r\n\t\timgs: []\r\n\t}\r\n\trender(): any {\r\n\t\treturn (\r\n\t\t\t<div className=\"bodyMessage\">\r\n\t\t\t\t<div className=\"textMessage\">{this.props.message.text}\r\n\t\t\t\t\t{this.props.message.files.length ? this.state.imgs : null}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\r\n\tcomponentDidMount(): void {\r\n\t\tconst { files } = this.props.message;\r\n\t\tif (files.length) {\r\n\t\t\tfiles.forEach(\r\n\t\t\t\tfile => {\r\n\t\t\t\t\tconst reader = new FileReader();\r\n\t\t\t\t\treader.readAsDataURL(file);\r\n\t\t\t\t\treader.onloadend = (): void => {\r\n\t\t\t\t\t\tthis.setState(prevState => ({ imgs: prevState.imgs.concat(<img src={reader.result as any} style={{maxHeight: '150px', maxWidth: '150px'}}/>) }));\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n}","import React from 'react';\r\nimport Message from '../../shared/Message/Message';\r\nimport { MessagesStore } from '../../../types/store';\r\nimport './MessageList.css';\r\n\r\ninterface MessageListProps {\r\n\tmessages: MessagesStore;\r\n}\r\n\r\nexport default class MessageList extends React.PureComponent<MessageListProps> {\r\n\trender(): any {\r\n\t\treturn (\r\n\t\t\t<div className=\"divMessageList\">\r\n\t\t\t\t{Object.values(this.props.messages).map(message => (\r\n\t\t\t\t\t<Message message={message} key={message.id}/>\r\n\t\t\t\t))}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}","import React from 'react';\r\nimport { MessageValue } from '../../../types/store';\r\nimport './MessageInput.css';\r\n\r\ninterface MessageInputProps {\r\n\taddMessage(message: MessageValue): void;\r\n}\r\n\r\ninterface MessageInputState {\r\n\ttext: string;\r\n\tfiles: Array<File>;\r\n}\r\n\r\nexport default class MessageInput extends React.PureComponent<MessageInputProps, MessageInputState> {\r\n\tstate = { text: '', files: [] };\r\n\r\n\thandleChange = (e): void => {\r\n\t\tthis.setState({ text: e.target.value });\r\n\t}\r\n\r\n\thandleSubmit = (e): void => {\r\n\t\te.preventDefault();\r\n\t\tif (!(this.state.text.length || this.state.files.length)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst message = { text: this.state.text, id: Date.now(), files: this.state.files };\r\n\t\tthis.props.addMessage(message);\r\n\r\n\t\tthis.setState({\r\n\t\t\ttext: '',\r\n\t\t\tfiles: []\r\n\t\t});\r\n\t\tdocument.getElementById('gallery').innerHTML = '';\r\n\t}\r\n\r\n\thandlerFunction = (e): void => {\r\n\t\tconsole.log(e);\r\n\t\te.preventDefault();\r\n\t}\r\n\r\n\thandleDrop = (e): void => {\r\n\t\tconst dt = e.dataTransfer;\r\n\t\tlet files = dt.files;\r\n\t\tfiles = [...files];\r\n\t\tfiles.forEach(this.uploadFile);\r\n\t\tfiles.forEach(this.previewFile);\r\n\t};\r\n\r\n\thandleFiles = (files): void => {\r\n\t\tfiles = (files.target.files);\r\n\t\tfiles = [...files];\r\n\t\tfiles.forEach(this.uploadFile);\r\n\t\tfiles.forEach(this.previewFile);\r\n\t}\r\n\r\n\tuploadFile = (file): void => {\r\n\t\tthis.setState((prevState) => ({ files: prevState.files.concat(file) }));\r\n\t}\r\n\r\n\tpreviewFile = (file) => {\r\n\t\tconst reader = new FileReader();\r\n\t\treader.readAsDataURL(file);\r\n\t\treader.onloadend = () => {\r\n\t\t\tconst img = document.createElement('img');\r\n\t\t\t(img as any).src = reader.result;\r\n\t\t\tdocument.getElementById('gallery').appendChild(img);\r\n\t\t};\r\n\t}\r\n\r\n\trender(): any {\r\n\t\treturn (\r\n\t\t\t<div id=\"drop-area\" onSubmit={this.handleSubmit}>\r\n\t\t\t\t<form className=\"form\">\r\n\t\t\t\t\t<input type=\"file\" id=\"fileElem\" multiple accept=\"image/*\" onChange={this.handleFiles} />\r\n\t\t\t\t\t<label className=\"button\" htmlFor=\"fileElem\">\r\n\t\t\t\t\t\t<i className=\"fa fa-paperclip\" style={{ fontSize: '24px' }}></i>\r\n\t\t\t\t\t</label>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\tautoComplete=\"off\"\r\n\t\t\t\t\t\tclassName=\"input\"\r\n\t\t\t\t\t\tplaceholder='Напишите сообщение...'\r\n\t\t\t\t\t\tonChange={this.handleChange}\r\n\t\t\t\t\t\tvalue={this.state.text}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</form>\r\n\t\t\t\t<div id=\"gallery\"></div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\r\n\tpreventDefaults(e) {\r\n\t\te.preventDefault();\r\n\t\te.stopPropagation();\r\n\t}\r\n\r\n\tcomponentDidMount(): any {\r\n\t\tconst dropArea = document.getElementById('drop-area');\r\n\r\n\t\tfunction highlight(): void {\r\n\t\t\tdropArea.classList.add('highlight');\r\n\t\t}\r\n\t\tfunction unhighlight(): void {\r\n\t\t\tdropArea.classList.remove('highlight');\r\n\t\t}\r\n\r\n\t\t['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {\r\n\t\t\tdropArea.addEventListener(eventName, this.preventDefaults, false);\r\n\t\t});\r\n\t\t['dragenter', 'dragover'].forEach(eventName => {\r\n\t\t\tdropArea.addEventListener(eventName, highlight, false);\r\n\t\t});\r\n\t\t['dragleave', 'drop'].forEach(eventName => {\r\n\t\t\tdropArea.addEventListener(eventName, unhighlight, false);\r\n\t\t});\r\n\t\tdropArea.addEventListener('drop', this.handleDrop, false);\r\n\t}\r\n}","import { Dispatch, Action } from 'redux';\r\nimport { ADD_MESSAGE } from '../../types/actions';\r\nimport { MessageValue } from '../../types/store';\r\n\r\nexport const addMessage = (message: MessageValue) => {\r\n\treturn (dispatch: Dispatch<Action>): void => {\r\n\t\tdispatch({ type: ADD_MESSAGE, payload: message });\r\n\t};\r\n};","import React from 'react';\r\nimport MessageList from '../../components/elements/MessageList/MessageList';\r\nimport MessageInput from '../../components/elements/MessageInput/MessageInput';\r\nimport { MessagesStore, ApplicationStore, MessageValue } from '../../types/store';\r\nimport './styles.css';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators, Dispatch, AnyAction } from 'redux';\r\nimport { addMessage } from '../../redux/messages/messagesActions';\r\n\r\ninterface HomeScreenProps {\r\n\tmessagesStore: MessagesStore;\r\n\taddMessage(Item: MessageValue): void;\r\n}\r\n\r\nconst mapStateToProps = (state: ApplicationStore) => ({\r\n\tmessagesStore: state.messagesStore,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>) => ({\r\n\taddMessage: bindActionCreators(addMessage, dispatch)\r\n});\r\n\r\nclass HomeScreen extends React.Component<HomeScreenProps> {\r\n\r\n\trender(): any {\r\n\t\tconst { messagesStore, addMessage } = this.props;\r\n\t\treturn (\r\n\t\t\t<div className=\"background\">\r\n\t\t\t\t<header style={{background: 'white', height: '50px' }}>Чат</header>\r\n\t\t\t\t<div className=\"container\">\r\n\t\t\t\t\t<div className=\"content\">\r\n\t\t\t\t\t\t<MessageList messages={messagesStore} />\r\n\t\t\t\t\t\t<MessageInput addMessage={addMessage} />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(HomeScreen);","import React, { Component } from 'react';\r\n\r\nimport { Provider } from 'react-redux';\r\nimport { store } from './redux/store';\r\nimport HomeScreen from './screen/HomeScreen';\r\n\r\nclass App extends Component {\r\n\trender(): React.ReactElement {\r\n\t\treturn (\r\n\t\t\t<Provider store={store}>\r\n\t\t\t\t<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\"></link>\r\n\t\t\t\t<HomeScreen />\r\n\t\t\t</Provider >\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.register();"],"sourceRoot":""}